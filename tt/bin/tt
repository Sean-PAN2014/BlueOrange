#!/bin/bash
#ident  "%W%"

BASEDIR=`dirname $0`
ACTION=$1
ARGS=${@:2}

# install-blaze
	if [ "${ACTION}" == "deployAll" ] || [ "${ACTION}" == "da" ];then
		${BASEDIR}/deployAll.sh ${ARGS}
# install-blaze for static data service
	elif [ "${ACTION}" == "deployAllSds" ] || [ "${ACTION}" == "das" ];then
		${BASEDIR}/deployAllSds.sh ${ARGS}
# startApp
	elif [ "${ACTION}" == "startApp" ] || [ "${ACTION}" == "ra" ];then
		${BASEDIR}/startApp.sh ${ARGS}
# startAppAll
	elif [ "${ACTION}" == "startAppAll" ] || [ "${ACTION}" == "raa" ];then
		${BASEDIR}/startAppAll.sh ${ARGS}
# stopApp
	elif [ "${ACTION}" == "stopApp" ] || [ "${ACTION}" == "sa" ];then
		${BASEDIR}/stopApp.sh ${ARGS}
# stopAppAll
	elif [ "${ACTION}" == "stopAppAll" ] || [ "${ACTION}" == "saa" ];then
		${BASEDIR}/status.sh ${ARGS}
		${BASEDIR}/stopAppAll.sh ${ARGS}
# installApp
	elif [ "${ACTION}" == "installApp" ] || [ "${ACTION}" == "i" ];then
		${BASEDIR}/installApp.sh ${ARGS}
# uninstallApp
	elif [ "${ACTION}" == "uninstallApp" ] || [ "${ACTION}" == "d" ];then
		${BASEDIR}/uninstallApp.sh ${ARGS}
# updateAndInstallApp
	elif [ "${ACTION}" == "updateAndInstallApp" ] || [ "${ACTION}" == "ui" ];then
		${BASEDIR}/updateAndInstallApp.sh ${ARGS}
# updateAndInstallApp
	elif [ "${ACTION}" == "updateAndInstallJar" ] || [ "${ACTION}" == "jar" ];then
		${BASEDIR}/updateAndInstallJar.sh ${ARGS}
# updateAppFolder
	elif [ "${ACTION}" == "updateAppFolder" ] || [ "${ACTION}" == "u" ];then
		${BASEDIR}/updateAppFolder.sh ${ARGS}
# status
	elif [ "${ACTION}" == "status" ] || [ "${ACTION}" == "s" ];then
		${BASEDIR}/status.sh ${ARGS}
# log
	elif [ "${ACTION}" == "log" ] || [ "${ACTION}" == "l" ];then
		${BASEDIR}/log.sh ${ARGS}
# log
	elif [ "${ACTION}" == "copyScripts" ] || [ "${ACTION}" == "cs" ];then
		${BASEDIR}/copyScripts.sh ${ARGS}
# log
	elif [ "${ACTION}" == "copyApp" ] || [ "${ACTION}" == "ca" ];then
		${BASEDIR}/copyApp.sh ${ARGS}
# log
	elif [ "${ACTION}" == "copyAppAll" ] || [ "${ACTION}" == "caa" ];then
		${BASEDIR}/copyAppAll.sh ${ARGS}
# xenv
	elif [ "${ACTION}" == "xenv" ] || [ "${ACTION}" == "x" ];then
		${BASEDIR}/xenv.sh ${ARGS}
# rpm
	elif [ "${ACTION}" == "rpm" ] || [ "${ACTION}" == "p" ];then
		if [ "${ARGS}" == "all" ]; then
			${BASEDIR}/rpm.sh autobooking
			${BASEDIR}/rpm.sh optimizer
			${BASEDIR}/rpm.sh optimizerview
			${BASEDIR}/rpm.sh execution
		else
			${BASEDIR}/rpm.sh ${ARGS}
		fi
# copy rpm
	elif [ "${ACTION}" == "copyRpms" ] || [ "${ACTION}" == "cr" ];then
		${BASEDIR}/copyRpms.sh ${ARGS}
# svn
	elif [ "${ACTION}" == "svn" ] || [ "${ACTION}" == "svn" ];then
		${BASEDIR}/svn.sh ${ARGS}
# svn
	elif [ "${ACTION}" == "checkAppVersion" ] || [ "${ACTION}" == "cav" ];then
		${BASEDIR}/checkAppVersion.sh ${ARGS}
# none matched
	else
		echo "This command[${ACTION}] is not supported!"
		echo "Supported Command List!"
		echo "	deployAll {skipTest}, da" -- when skipTest=no, test will run. Otherwise, skip test
		echo "	deployAllSds {skipTest}, das" -- when skipTest=no, test will run. Otherwise, skip test
		echo "	startApp [appName] {appEnv}, ra"
		echo "	startAppAll {appEnv}, raa"
		echo "	stopApp [appName], sa"
		echo "	stopAppAll, saa"
		echo "	installApp [appName], i"
		echo "	uninstallApp [appName], d"
		echo "	updateAndInstallApp [appName] {skipTest}, ui" -- when skipTest=no, test will run. Otherwise, skip test
		echo "	updateAndInstallJar [appName] {skipTest}, jar" -- when skipTest=no, test will run. Otherwise, skip test
		echo "	updateAppFolder, u"
		echo "	status, s"
		echo "	log [appName], l"
		echo "	copyScripts [soeId] {serverName} {remoteAppDir}, cs"
		echo "	copyApp [appName] [soeId] {serverName} {remoteAppDir}, ca"
		echo "	copyAppAll [soeId] {serverName} {remoteAppDir}, caa"
		echo "	xenv, x"
		echo "	rpm, p [appName] -- when [appName] is all, package all app's rpm"
		echo "	svn [svn command]"
		echo "	copyRpms [soeId] {serverName} {remoteAppDir}, cr"
		echo "	checkAppVersion, cav"
		echo "appName List!"
		echo "	autobooking"
		echo "	optimizer"
		echo "	optimizerview"
		echo "	execution"
		echo "	static-data-service"
		echo " -- jar only ones"
		echo "	ttl-commons"
		echo "	CommonService"
	fi

